import{_ as e,p as i,q as o,Y as l}from"./framework-e1bed10d.js";const r={},c=l('<h1 id="docker是什么" tabindex="-1"><a class="header-anchor" href="#docker是什么" aria-hidden="true">#</a> docker是什么？</h1><p>学习docker之前我们应该先了解一下容器是什么？容器和我们生活中集装箱很类似。集装箱的发明大大节约了人类的海洋运输成本。集装箱有以下优点： ::: hljs-left</p><ol><li>集装箱之间相互隔离</li><li>长期反复使用</li><li>快速装载和卸载</li><li>规格标准，在港口和船上都可以摆放</li></ol><p>::: 容器也具有和集装箱类似的特性。我们软件部署遇到问题之一就是隔离。多个软件部署在同一台服务器上。如何实现资源隔离和相互不干扰。虚拟化技术诞生解决了这一问题。我们可以将不同的应用程序部署在不同的虚拟机上,以实现资源的隔离。但是每一个虚拟机都是一个操作系统。这对于我们来说是笨重,且占用很多资源的。由此容器技术由此诞生了。</p><p>相对于虚拟机运行完整的操作系统。容器们则共享一个操作系统的内核。只隔离了程序运行时候的环境~程序依赖的各种库和配置~。 与操作系统动辄几个G的内存占用相比,容器则更加轻量级和占资源更少。 <strong>那么docker和容器又是什么关系呢？其实容器是一个通用技术,docker则是其中的一种实现。</strong></p><p>==docker中有几个重要的概念== ::: hljs-left</p><ol><li>dockerFile</li><li>image</li><li>container</li></ol><p>::: image~镜像~可以理解为可以执行的程序文件,container~容器~可以理解为已经运行起来的程序进程。 而且dockerFile就是编写image~镜像~程序的代码。 接下来就围绕这个三个概念进行学习~</p>',8),t=[c];function a(n,d){return i(),o("div",null,t)}const _=e(r,[["render",a],["__file","Dockerxuexirumen（yi）.html.vue"]]);export{_ as default};
